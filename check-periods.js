// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏ß‡∏î‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
require('dotenv').config();
const { Pool } = require('pg');
const { DateTime } = require('luxon');

const pool = new Pool({
  host: process.env.DB_HOST || 'localhost',
  port: parseInt(process.env.DB_PORT) || 5432,
  database: process.env.DB_NAME || 'contract_db',
  user: process.env.DB_USER || 'postgres',
  password: process.env.DB_PASS || process.env.DB_PASSWORD || '1234'
});

async function checkPeriods() {
  console.log('\n========================================');
  console.log('üìä ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏ß‡∏î‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö');
  console.log('========================================\n');
  
  try {
    // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏á‡∏ß‡∏î‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const allPeriods = await pool.query(`
      SELECT c.contract_no, c.contact_name, c.status as contract_status,
             c.alert_emails, p.period_no, 
             TO_CHAR(p.due_date, 'YYYY-MM-DD') as due_date,
             p.alert_days,
             (p.due_date::date - CURRENT_DATE) as days_until_due
      FROM contracts c
      JOIN contract_periods p ON c.id = p.contract_id
      WHERE c.deleted_flag = FALSE
      ORDER BY days_until_due ASC, c.contract_no, p.period_no
      LIMIT 20
    `);
    
    console.log(`‡∏û‡∏ö‡∏á‡∏ß‡∏î‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${allPeriods.rows.length} ‡∏á‡∏ß‡∏î\n`);
    
    if (allPeriods.rows.length > 0) {
      console.log('‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏á‡∏ß‡∏î‡∏á‡∏≤‡∏ô:');
      console.log('=====================================');
      
      for (const period of allPeriods.rows) {
        const dueDate = period.due_date ? DateTime.fromISO(period.due_date).toFormat('dd/MM/yyyy') : '-';
        console.log(`\n‡∏™‡∏±‡∏ç‡∏ç‡∏≤: ${period.contract_no}`);
        console.log(`  ‡∏ä‡∏∑‡πà‡∏≠: ${period.contact_name || '-'}`);
        console.log(`  ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${period.contract_status}`);
        console.log(`  ‡∏á‡∏ß‡∏î‡∏ó‡∏µ‡πà: ${period.period_no}`);
        console.log(`  ‡∏ß‡∏±‡∏ô‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î: ${dueDate}`);
        console.log(`  ‡πÄ‡∏´‡∏•‡∏∑‡∏≠: ${period.days_until_due !== null ? period.days_until_due + ' ‡∏ß‡∏±‡∏ô' : '-'}`);
        console.log(`  ‡πÅ‡∏à‡πâ‡∏á‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤: ${period.alert_days || '0'} ‡∏ß‡∏±‡∏ô`);
        console.log(`  ‡∏≠‡∏µ‡πÄ‡∏°‡∏•: ${period.alert_emails ? '‡∏°‡∏µ' : '‡πÑ‡∏°‡πà‡∏°‡∏µ'}`);
      }
    }
    
    // 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏á‡∏ß‡∏î‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô (‡πÉ‡∏ä‡πâ query ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö alertJob)
    const alertDays = parseInt(process.env.ALERT_PERIOD_DUE_DAYS) || 1;
    console.log(`\n\nüîî ‡∏á‡∏ß‡∏î‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô (ALERT_PERIOD_DUE_DAYS = ${alertDays}):`);
    console.log('=====================================');
    
    const alertPeriods = await pool.query(`
      SELECT c.contract_no, c.contact_name, c.department, c.alert_emails, 
             c.contact_person, p.period_no, p.due_date, p.alert_days,
             (p.due_date::date - CURRENT_DATE) as days_until_due
      FROM contracts c
      JOIN contract_periods p ON c.id = p.contract_id
      WHERE c.deleted_flag = FALSE
        AND c.status IN ('ACTIVE', 'CRTD')
        AND p.due_date IS NOT NULL
        AND p.due_date >= CURRENT_DATE
        AND (p.due_date::date - CURRENT_DATE) <= GREATEST(COALESCE(p.alert_days, 0), $1)
        AND c.alert_emails IS NOT NULL AND c.alert_emails != ''
    `, [alertDays]);
    
    console.log(`‡∏û‡∏ö ${alertPeriods.rows.length} ‡∏á‡∏ß‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô\n`);
    
    if (alertPeriods.rows.length > 0) {
      for (const period of alertPeriods.rows) {
        const dueDate = period.due_date ? DateTime.fromISO(period.due_date).toFormat('dd/MM/yyyy') : '-';
        console.log(`‚úÖ ${period.contract_no} - ‡∏á‡∏ß‡∏î‡∏ó‡∏µ‡πà ${period.period_no}`);
        console.log(`   ‡∏ß‡∏±‡∏ô‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î: ${dueDate} (‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${period.days_until_due} ‡∏ß‡∏±‡∏ô)`);
        console.log(`   ‡∏≠‡∏µ‡πÄ‡∏°‡∏•: ${period.alert_emails}`);
      }
    } else {
      console.log('‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏á‡∏ß‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô');
      console.log('\n‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô:');
      console.log('1. ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ACTIVE ‡∏´‡∏£‡∏∑‡∏≠ CRTD');
      console.log('2. ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô (alert_emails)');
      console.log('3. ‡∏á‡∏ß‡∏î‡∏á‡∏≤‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô');
      console.log('4. ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• due_date');
    }
    
    // 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
    console.log('\n\n‚öôÔ∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:');
    console.log('=====================================');
    console.log(`ALERT_PERIOD_DUE_DAYS: ${process.env.ALERT_PERIOD_DUE_DAYS || '1'}`);
    console.log(`ALERT_CONTRACT_EXPIRY_DAYS: ${process.env.ALERT_CONTRACT_EXPIRY_DAYS || '7'}`);
    console.log(`ALERT_SCHEDULE: ${process.env.ALERT_SCHEDULE || '* * * * *'}`);
    
  } catch (error) {
    console.error('\n‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message);
    console.error(error);
  } finally {
    await pool.end();
  }
}

checkPeriods();
